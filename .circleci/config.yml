version: 2

defaults: &defaults
    working_directory: ~/project
    docker:
      - image: circleci/ruby:2.6.3-node-browsers
        environment:
         BUNDLE_JOBS: 2
         BUNDLE_RETRY: 2
         BUNDLE_PATH: vendor/bundle
         RAILS_ENV: test
         REVIEWDOG_VERSION: 0.9.11

      - image: circleci/mysql:5.7
        environment:
          - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
          - MYSQL_ROOT_HOST: '%'

jobs:
  bundle_install:
    <<: *defaults

    steps:
      - checkout
      - attach_workspace:
          at: ~/projecct

      - restore_cache:
          keys:
            - gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - gem-cache-{{ arch }}-{{ .Branch }}
            - gem-cache

      - run:
          name:  bundle install
          command: bundle check || bundle install --clean

      - save_cache:
          key: gem-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle

      - persist_to_workspace:
          root: .
          paths: vendor/bundle

  rails_minitest:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/project

      - run:
          name: Database setup
          command: |
            mv config/database.yml.ci config/database.yml 
            bundle exec rails db:create db:migrate RAILS_ENV=test

      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      - store_test_results:
          path: /tmp/test-results

      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

workflows:
  version: 2
  continuous-integration:
    jobs:
      - bundle_install
      - rails_minitest:
          requires:
            - bundle_install

